<project default="install">
        <macrodef name="run-director">
		<attribute name="input-repo" />
		<attribute name="install-path" />
		<attribute name="install-iu" />
		<element name="extra-args" implicit="true" optional="true" description="additional arg elements" />
		<sequential>
			<echo>
Source Repo(s): @{input-repo}
Install Path: @{install-path}
Feature(s) or Plugin(s) to Install:
@{install-iu}
</echo>

			<mkdir dir="@{install-path}" />
			<chmod perm="ugo+rwx" file="@{install-path}/eclipse" />
			<exec executable="@{install-path}/eclipse"
			      failonerror="true"
			      dir="@{install-path}"
			      timeout="1200000"
			      taskname="p2.dir">
				<!-- deprecated application for Eclipse 3.4: org.eclipse.equinox.p2.director.app.application -->
				<arg line=" -application org.eclipse.equinox.p2.director" />
				<arg line=" -nosplash" />
				<arg line=" --launcher.suppressErrors" />
				<arg line=" -consoleLog" />
				<arg line=" -flavor tooling" />
				<arg line=" -roaming" />
				<arg line=" -profile SDKProfile" />
				<arg line=" -destination @{install-path}" />
				<arg line=" -bundlepool @{install-path}" />
				<arg line=" -installIU @{install-iu}" />
				<arg line=" -metadataRepository @{input-repo},file:@{install-path}/p2/org.eclipse.equinox.p2.engine/profileRegistry/SDKProfile.profile"
				/>
				<arg line=" -artifactRepository @{input-repo},file:@{install-path}" />
				<arg line=" -profileProperties org.eclipse.update.install.features=true" />
				<arg line=" -vmargs" />
				<arg line=" -Declipse.p2.data.area=@{install-path}/p2" />
				<arg line=" -Declipse.p2.MD5Check=false" />
				<extra-args />
			</exec>
		</sequential>
        </macrodef>

	<target name="help">
		<echo>
		COMMANDLINE PARAMS:

		install   - csv list of features to install; if missing, install ALL found features.

		sourceZip - /full/path/to/jboss-tools-update.zip; zip must exist

		targetDir - /full/path/to/an/existing/jbdevstudio/eclipse; folder must exist

		OPTIONAL / MAY BE REQUIRED:

		otherRepos - csv list of local, zipped, or remote update sites from which to install 
			prereqs (eg., BIRT, Maven); may want these sites: 
			http://download.jboss.org/jbosstools/updates/target-platform/latest/
			http://download.eclipse.org/releases/helios/,\
			http://download.eclipse.org//birt/update-site/2.6/,\
			http://m2eclipse.sonatype.org/sites/m2e/,\
			http://m2eclipse.sonatype.org/sites/m2e-extras/,\
			http://subclipse.tigris.org/update_1.6.x

		RUNNING THIS SCRIPT:

		/path/to/eclipse-dir/eclipse -consolelog -nosplash -data /tmp \
      		-application org.eclipse.ant.core.antRunner \
      		-f /path/to/installJBossTools.xml \
      			-DotherRepos=http://download.jboss.org/jbosstools/updates/target-platform/latest/
			-DsourceZip=/path/to/JBossTools-Update-3.1.0.v200909102049M-H274-M3.zip \
			-DtargetDir=/path/to/eclipse-dir \
			-Dinstall=org.jboss.tools.jmx.sdk.feature.feature.group
</echo>
	</target>

	<property name="install" value="" />
	<property name="otherRepos" value="" />

	<property name="sourceZip" value="" />
	<property name="targetDir" value="" />

	<target name="-validate">
		<fail>
			<condition>
				<or>
					<not>
						<isset property="targetDir" />
					</not>
					<equals arg1="${targetDir}" arg2="" />
					<not>
						<available file="${targetDir}" type="dir" />
					</not>
				</or>
			</condition>
ERROR!
Must specify path to an existing Eclipse or JBoss Developer Studio  
install folder into which features will be installed.
</fail>

		<fail>
			<condition>
				<or>
					<not>
						<isset property="sourceZip" />
					</not>
					<equals arg1="${sourceZip}" arg2="" />
				</or>
			</condition>
ERROR!
Must specify path to a previously downloaded JBoss Tools 
or JBoss Developer Studio Update site zip.  
</fail>

		<fail>
			<condition>
				<not>
					<available file="${sourceZip}" type="file" />
				</not>
			</condition>
ERROR!
Cannot find sourceZip in ${sourceZip}. 
</fail>

		<condition property="features.toinstall" value="${install}">
			<and>
				<isset property="install" />
				<not>
					<equals arg1="${install}" arg2="" />
				</not>
			</and>
		</condition>

		<condition property="repo.suffix" value=",${otherRepos}" else="">
			<and>
				<isset property="otherRepos" />
				<not>
					<equals arg1="${otherRepos}" arg2="" />
				</not>
			</and>
		</condition>
	</target>

	<target name="-init-install" depends="-validate" unless="features.toinstall">
		<pathconvert property="features.toinstall" pathsep=",">
			<zipfileset src="${sourceZip}" includes="features/*.jar" />
			<chainedmapper>
				<flattenmapper />
				<!-- simplified from old version; do we need to do weird stuff depending on what's after the underscore? -->
				<regexpmapper from="([^_]+)_.*\.jar" to="\1" />
				<globmapper from="*" to="*.feature.group" />
			</chainedmapper>
		</pathconvert>
	</target>

	<target name="install" depends="-init-install">
		<run-director install-iu="${features.toinstall}"
		              install-path="${targetDir}"
		              input-repo="jar:file:${sourceZip}!/${repo.suffix}" />
	</target>

</project>
